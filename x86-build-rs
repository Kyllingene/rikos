use std::ffi::OsStr;
use std::path::PathBuf;
use std::process::{Command, Stdio};
use std::{env, fs};

fn main() {
    let out_dir = PathBuf::from(env::var_os("OUT_DIR").unwrap());
    // let os = PathBuf::from(std::env::var_os("CARGO_STATICLIB_FILE_OS").unwrap());

    // let os_path = os.parent().unwrap();

    // let os_name = os.file_name().unwrap().to_str().unwrap();
    // let os_name = os_name
        // .strip_suffix(".a")
        // .unwrap_or(os_name)
        // .strip_prefix("lib")
        // .unwrap_or(os_name);

    let mut files: Vec<PathBuf> = fs::read_dir("riscv-kernel/asm")
        .expect("asm directory missing")
        .filter_map(|f| {
            f.ok()
                .filter(|f| f.path().extension() == Some(&OsStr::new("asm")))
                .map(|f| f.path())
        })
        .collect();

    for file in files.iter_mut() {
        let outname = file.file_name().unwrap();
        let mut outpath = out_dir.join(outname);
        outpath.set_extension("o");

        let output = Command::new("nasm")
            .args(["-f", "elf64"])
            .arg(&file)
            .arg("-o")
            .arg(&outpath)
            .stdout(Stdio::inherit())
            .stderr(Stdio::inherit())
            .output()
            .expect("failed to run nasm");

        if !output.status.success() {
            panic!("nasm failed");
        }

        *file = outpath;
    }

    let mut ld = Command::new("ld");
    ld.args(["-n", "--gc-sections", "-o"])
        .arg(out_dir.join("kernel.bin"))
        .arg("-T")
        .arg("riscv-kernel/asm/linker.ld")
        .stdout(Stdio::inherit())
        .stderr(Stdio::inherit());

    for file in &files {
        ld.arg(file);
    }

    // let output = ld
        // .arg("-L")
        // .arg(os_path)
        // .args(["-l", os_name])
        // .output();

    // if !output.expect("failed to run ld").status.success() {
        // panic!("ld failed");
    // }

    fs::copy(out_dir.join("kernel.bin"), "image/boot/kernel.bin")
        .expect("failed to move kernel.bin");

    // let output = Command::new("grub-mkrescue")
        // .args(["-o", "target/rikos.iso", "image"])
        // .stdout(Stdio::inherit())
        // .stderr(Stdio::inherit())
        // .output()
        // .expect("failed to run grub-mkrescue");

    // if !output.status.success() {
        // panic!("grub-mkrescue failed");
    // }
}
